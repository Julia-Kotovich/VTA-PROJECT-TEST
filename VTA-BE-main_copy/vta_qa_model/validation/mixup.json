[
    {
        "question": "there are several tools for the processes in software development. these tools are meant to support the development not to control it. during the development process in capstone, if tools do not work and this is expressed in a retrospective, it can be changed. the four main categories of tools that development teams need are design tools, source code versioning systems, software development platforms, and continuous integration servers. design tools help to present what a solution should look like and simulate its main interaction ( it is needed to show a project to stakeholders to make it concrete ). many people use powerpoint to show what they want to have. it is even possible to make clickable demos that way. many tools exist, an example is invision. this tool can be used to easily create a first draft. the main concepts are artboards ( screens / landing visualizations ), and interactions. interactions define an event and a landing artboard. a software development platform is a web tool that allows one to store and browse source code through a repository and organize the backlog and the testing process. there are now many platforms online that provide these kinds of functionalities for free or for subscriptions. popular examples include github ( bought by microsoft and is free for open source ), gitlab and gitorious ( free clones of github to use and install on - premises ), devops by microsoft, and jira by atlassian. a continuous integration server is a server that runs pipelines pulls from a repository, compiles the code, runs tests automatically, and notifies you if there is a problem. few recognized and professional tools exist. examples are jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft ). in the capstone project course, we will use the processes and tools that we presented. much of the training for tools should be done online by following tutorials. all these are the basics that everyone needs to understand to do a decent job. ta session will help and answer questions whenever possible. what can be done if tools do not work during the capstone development process?",
        "predicted_answer": "",
        "true_answer": "it can be changed."
    },
    {
        "question": "software architecture is a high - level view of a piece of software indicating its main subparts, an explanation of the diverse pieces of software that collaborate, or simply a boxes and arrow diagram ( or several ). the book pattern - oriented software architecture : a system of patterns ( https : / / www. amazon. com / pattern - oriented - software - architecture - system - patterns / dp / 0471958697 ) is a suggested resource for learning about software architecture patterns. in essence, there are types of architecture that make sense from a requirements standpoint ( functional and non - functional ). examples of software architecture are mvc ( model - view - controller ), etl ( data extraction - transformation - loading ), layered, pub - sub ( publish subscribe ), and microservices. for quick reference on software architecture, visit the following wikipedia page ( https : / / en. wikipedia. org / wiki / architectural _ pattern ). information about mvc can be found at ( https : / / en. wikipedia. org / wiki / model - view - controller ). information about etl can be found at ( https : / / en. wikipedia. org / wiki / extract, _ transform, _ load ). information on layered architecture can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch01. html ). information on pub - sub can be found at ( https : / / cloud. google. com / pubsub / architecture ). information on microservices can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch04. html ). many other books on software architecture exist here are a few recommendations ( https : / / www. oreilly. com / library / view / fundamentals - of - software / 9781492043447 /, https : / / www. oreilly. com / library / view / building - microservices - 2nd / 9781492034018 /, https : / / www. amazon. com / just - enough - software - architecture - risk - driven / dp / 0984618104 ). what is a high - level view of a piece of software typically called?",
        "predicted_answer": "high - level view of a piece of software indicating its main subparts,",
        "true_answer": "software architecture"
    },
    {
        "question": "an important aspect of a software product is the need to talk to stakeholders. to do this effectively, you have to prepare a pitch and a demo. a pitch should take 2 - 5 minutes, be simple, straight to the point, fun ( if possible ), and insightful. it should let people understand why they should give you money. a pitch should be structured as follows : problem ( job - to - be - done ), your solution ( why is your solution creating a paradigm shift ), market and competitor analysis, team, business case, unique insights that you have, and ask. the problem section answers the \" why \" question. start with a question like, \" did you ever ask yourself? \" and explain the problem from the customer's perspective. your solution answers \" what \" and \" how. \". present your solution quickly and efficiently, explain the benefits, how it solves the problem, and how it changes everything ( paradigm shift ). for market and competitor analysis, make a 2 - dimensional graph ( find the right axes where your solution fits ) and show the market size if possible. in the team section, present your team with 2 + founders ( include pictures ). the business case should show a \" hockey stick \" growth projection but not promise anything before 3 years. explain your unique insight ( this is why you are the startup that will make it ). in the ask section, indicate what you need, be it money, feedback, or advertisement. the demo should be compelling, answer the problem statement nicely, be short, and work. what should be included in the team section of a pitch?",
        "predicted_answer": "in the team section, present your team with 2 + founders ( include pictures ).",
        "true_answer": "should be compelling, answer the problem statement nicely, be short, and work."
    },
    {
        "question": "software architecture is a high - level view of a piece of software indicating its main subparts, an explanation of the diverse pieces of software that collaborate, or simply a boxes and arrow diagram ( or several ). the book pattern - oriented software architecture : a system of patterns ( https : / / www. amazon. com / pattern - oriented - software - architecture - system - patterns / dp / 0471958697 ) is a suggested resource for learning about software architecture patterns. in essence, there are types of architecture that make sense from a requirements standpoint ( functional and non - functional ). examples of software architecture are mvc ( model - view - controller ), etl ( data extraction - transformation - loading ), layered, pub - sub ( publish subscribe ), and microservices. for quick reference on software architecture, visit the following wikipedia page ( https : / / en. wikipedia. org / wiki / architectural _ pattern ). information about mvc can be found at ( https : / / en. wikipedia. org / wiki / model - view - controller ). information about etl can be found at ( https : / / en. wikipedia. org / wiki / extract, _ transform, _ load ). information on layered architecture can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch01. html ). information on pub - sub can be found at ( https : / / cloud. google. com / pubsub / architecture ). information on microservices can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch04. html ). many other books on software architecture exist here are a few recommendations ( https : / / www. oreilly. com / library / view / fundamentals - of - software / 9781492043447 /, https : / / www. oreilly. com / library / view / building - microservices - 2nd / 9781492034018 /, https : / / www. amazon. com / just - enough - software - architecture - risk - driven / dp / 0984618104 ). what are some recommended books on software architecture?",
        "predicted_answer": "",
        "true_answer": "( https : / / www. oreilly. com / library / view / fundamentals - of - software / 9781492043447 /, https : / / www. oreilly. com / library / view / building - microservices - 2nd / 9781492034018 /, https : / / www. amazon. com / just - enough - software - architecture - risk - driven / dp / 0984618104 )."
    },
    {
        "question": "there are several tools for the processes in software development. these tools are meant to support the development not to control it. during the development process in capstone, if tools do not work and this is expressed in a retrospective, it can be changed. the four main categories of tools that development teams need are design tools, source code versioning systems, software development platforms, and continuous integration servers. design tools help to present what a solution should look like and simulate its main interaction ( it is needed to show a project to stakeholders to make it concrete ). many people use powerpoint to show what they want to have. it is even possible to make clickable demos that way. many tools exist, an example is invision. this tool can be used to easily create a first draft. the main concepts are artboards ( screens / landing visualizations ), and interactions. interactions define an event and a landing artboard. a software development platform is a web tool that allows one to store and browse source code through a repository and organize the backlog and the testing process. there are now many platforms online that provide these kinds of functionalities for free or for subscriptions. popular examples include github ( bought by microsoft and is free for open source ), gitlab and gitorious ( free clones of github to use and install on - premises ), devops by microsoft, and jira by atlassian. a continuous integration server is a server that runs pipelines pulls from a repository, compiles the code, runs tests automatically, and notifies you if there is a problem. few recognized and professional tools exist. examples are jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft ). in the capstone project course, we will use the processes and tools that we presented. much of the training for tools should be done online by following tutorials. all these are the basics that everyone needs to understand to do a decent job. ta session will help and answer questions whenever possible. can you name some examples of continuous integration servers?",
        "predicted_answer": "",
        "true_answer": "jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft )."
    },
    {
        "question": "there are several tools for the processes in software development. these tools are meant to support the development not to control it. during the development process in capstone, if tools do not work and this is expressed in a retrospective, it can be changed. the four main categories of tools that development teams need are design tools, source code versioning systems, software development platforms, and continuous integration servers. design tools help to present what a solution should look like and simulate its main interaction ( it is needed to show a project to stakeholders to make it concrete ). many people use powerpoint to show what they want to have. it is even possible to make clickable demos that way. many tools exist, an example is invision. this tool can be used to easily create a first draft. the main concepts are artboards ( screens / landing visualizations ), and interactions. interactions define an event and a landing artboard. a software development platform is a web tool that allows one to store and browse source code through a repository and organize the backlog and the testing process. there are now many platforms online that provide these kinds of functionalities for free or for subscriptions. popular examples include github ( bought by microsoft and is free for open source ), gitlab and gitorious ( free clones of github to use and install on - premises ), devops by microsoft, and jira by atlassian. a continuous integration server is a server that runs pipelines pulls from a repository, compiles the code, runs tests automatically, and notifies you if there is a problem. few recognized and professional tools exist. examples are jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft ). in the capstone project course, we will use the processes and tools that we presented. much of the training for tools should be done online by following tutorials. all these are the basics that everyone needs to understand to do a decent job. ta session will help and answer questions whenever possible. could you name a design tool?",
        "predicted_answer": "",
        "true_answer": "invision."
    },
    {
        "question": "software architecture is a high - level view of a piece of software indicating its main subparts, an explanation of the diverse pieces of software that collaborate, or simply a boxes and arrow diagram ( or several ). the book pattern - oriented software architecture : a system of patterns ( https : / / www. amazon. com / pattern - oriented - software - architecture - system - patterns / dp / 0471958697 ) is a suggested resource for learning about software architecture patterns. in essence, there are types of architecture that make sense from a requirements standpoint ( functional and non - functional ). examples of software architecture are mvc ( model - view - controller ), etl ( data extraction - transformation - loading ), layered, pub - sub ( publish subscribe ), and microservices. for quick reference on software architecture, visit the following wikipedia page ( https : / / en. wikipedia. org / wiki / architectural _ pattern ). information about mvc can be found at ( https : / / en. wikipedia. org / wiki / model - view - controller ). information about etl can be found at ( https : / / en. wikipedia. org / wiki / extract, _ transform, _ load ). information on layered architecture can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch01. html ). information on pub - sub can be found at ( https : / / cloud. google. com / pubsub / architecture ). information on microservices can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch04. html ). many other books on software architecture exist here are a few recommendations ( https : / / www. oreilly. com / library / view / fundamentals - of - software / 9781492043447 /, https : / / www. oreilly. com / library / view / building - microservices - 2nd / 9781492034018 /, https : / / www. amazon. com / just - enough - software - architecture - risk - driven / dp / 0984618104 ). how would you define software architecture?",
        "predicted_answer": "high - level view of a piece of software indicating its main subparts,",
        "true_answer": "an explanation of the diverse pieces of software that collaborate,"
    },
    {
        "question": "an important aspect of a software product is the need to talk to stakeholders. to do this effectively, you have to prepare a pitch and a demo. a pitch should take 2 - 5 minutes, be simple, straight to the point, fun ( if possible ), and insightful. it should let people understand why they should give you money. a pitch should be structured as follows : problem ( job - to - be - done ), your solution ( why is your solution creating a paradigm shift ), market and competitor analysis, team, business case, unique insights that you have, and ask. the problem section answers the \" why \" question. start with a question like, \" did you ever ask yourself? \" and explain the problem from the customer's perspective. your solution answers \" what \" and \" how. \". present your solution quickly and efficiently, explain the benefits, how it solves the problem, and how it changes everything ( paradigm shift ). for market and competitor analysis, make a 2 - dimensional graph ( find the right axes where your solution fits ) and show the market size if possible. in the team section, present your team with 2 + founders ( include pictures ). the business case should show a \" hockey stick \" growth projection but not promise anything before 3 years. explain your unique insight ( this is why you are the startup that will make it ). in the ask section, indicate what you need, be it money, feedback, or advertisement. the demo should be compelling, answer the problem statement nicely, be short, and work. why is preparing a pitch important for a stakeholder presentation session?",
        "predicted_answer": "",
        "true_answer": "let people understand why they should give you money."
    },
    {
        "question": "there are several tools for the processes in software development. these tools are meant to support the development not to control it. during the development process in capstone, if tools do not work and this is expressed in a retrospective, it can be changed. the four main categories of tools that development teams need are design tools, source code versioning systems, software development platforms, and continuous integration servers. design tools help to present what a solution should look like and simulate its main interaction ( it is needed to show a project to stakeholders to make it concrete ). many people use powerpoint to show what they want to have. it is even possible to make clickable demos that way. many tools exist, an example is invision. this tool can be used to easily create a first draft. the main concepts are artboards ( screens / landing visualizations ), and interactions. interactions define an event and a landing artboard. a software development platform is a web tool that allows one to store and browse source code through a repository and organize the backlog and the testing process. there are now many platforms online that provide these kinds of functionalities for free or for subscriptions. popular examples include github ( bought by microsoft and is free for open source ), gitlab and gitorious ( free clones of github to use and install on - premises ), devops by microsoft, and jira by atlassian. a continuous integration server is a server that runs pipelines pulls from a repository, compiles the code, runs tests automatically, and notifies you if there is a problem. few recognized and professional tools exist. examples are jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft ). in the capstone project course, we will use the processes and tools that we presented. much of the training for tools should be done online by following tutorials. all these are the basics that everyone needs to understand to do a decent job. ta session will help and answer questions whenever possible. what are some examples of continuous integration servers?",
        "predicted_answer": "",
        "true_answer": "jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft )."
    },
    {
        "question": "software architecture is a high - level view of a piece of software indicating its main subparts, an explanation of the diverse pieces of software that collaborate, or simply a boxes and arrow diagram ( or several ). the book pattern - oriented software architecture : a system of patterns ( https : / / www. amazon. com / pattern - oriented - software - architecture - system - patterns / dp / 0471958697 ) is a suggested resource for learning about software architecture patterns. in essence, there are types of architecture that make sense from a requirements standpoint ( functional and non - functional ). examples of software architecture are mvc ( model - view - controller ), etl ( data extraction - transformation - loading ), layered, pub - sub ( publish subscribe ), and microservices. for quick reference on software architecture, visit the following wikipedia page ( https : / / en. wikipedia. org / wiki / architectural _ pattern ). information about mvc can be found at ( https : / / en. wikipedia. org / wiki / model - view - controller ). information about etl can be found at ( https : / / en. wikipedia. org / wiki / extract, _ transform, _ load ). information on layered architecture can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch01. html ). information on pub - sub can be found at ( https : / / cloud. google. com / pubsub / architecture ). information on microservices can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch04. html ). many other books on software architecture exist here are a few recommendations ( https : / / www. oreilly. com / library / view / fundamentals - of - software / 9781492043447 /, https : / / www. oreilly. com / library / view / building - microservices - 2nd / 9781492034018 /, https : / / www. amazon. com / just - enough - software - architecture - risk - driven / dp / 0984618104 ). where can i find more information about architectural patterns?",
        "predicted_answer": "( https : / / en. wikipedia. org / wiki / model - view - controller ). information about etl can be found at ( https : / / en. wikipedia. org / wiki / extract, _ transform, _ load ). information on layered architecture can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch01. html ). information on pub - sub can be found at ( https : / / cloud. google. com / pubsub / architecture ). information on microservices can be found at ( https : / / www. oreilly. com / library / view / software - architecture - patterns / 9781491971437 / ch04. html ).",
        "true_answer": "https : / / en. wikipedia. org / wiki / architectural _ pattern )"
    },
    {
        "question": "the capstone project provides a complete experience of software development from ideation to product. the formal course structure is a mix of formal presentations and guest presentations. the course structure includes requirements elicitations with stakeholders, fast design and prototyping, architecture, practicalities of cybersecurity development following agile processes, and development using state - of - the - art development tools ( git repositories, integration servers, static analyzers ). if you want to learn more about the capstone project course, check the article in the 2nd international workshop on frontiers in software engineering education ( fisee 23 ), edited in lecture notes in computer science by springer ( https : / / link. springer. com / chapter / 10. 1007 / 978 - 3 - 031 - 48639 - 5 _ 3 ). the instructor of the capstone project is prof dr manuel oriol. manuel is a professor of computer science at constructor institute. he has 10 years of experience in academia, and 10 years in industry, co - authored 60 + articles on software engineering and software architecture, and graduated 4 doctoral students, and 25 + msc students. the teaching assistants are muhammad khalid and julia kotovich. mohammed is a phd researcher and lecturer at constructor university. julia kotovich is a phd researcher at constructor institute. to succeed in the program, students must have a strong foundation in programming skills in an imperative language at the cs bachelor level, as well as knowledge of algorithms and data structures at the same level. these foundational skills enable students to tackle the complexities of the capstone project and other advanced coursework. the course plan includes design & ideation, architecture, and initial development, portal ready and deployed, and advanced concepts and refinements based on customer feedback. the course includes an opportunity for students to attend guest lectures, which are presentations given by external lecturers from industry or academia. these lectures cover best practices and other computer science - related topics, providing students with insights from experienced professionals in the field. the start time of guest lectures can be verified in the actual course schedule. taking this course is mandatory for students enrolled in the ast and csse programs. it is a crucial part of the curriculum that ensures you gain the necessary practical and theoretical skills for your future career in software engineering and related fields. where can you learn more about the capstone project course?",
        "predicted_answer": "",
        "true_answer": "( https : / / link. springer. com / chapter / 10. 1007 / 978 - 3 - 031 - 48639 - 5 _ 3 )."
    },
    {
        "question": "there are several tools for the processes in software development. these tools are meant to support the development not to control it. during the development process in capstone, if tools do not work and this is expressed in a retrospective, it can be changed. the four main categories of tools that development teams need are design tools, source code versioning systems, software development platforms, and continuous integration servers. design tools help to present what a solution should look like and simulate its main interaction ( it is needed to show a project to stakeholders to make it concrete ). many people use powerpoint to show what they want to have. it is even possible to make clickable demos that way. many tools exist, an example is invision. this tool can be used to easily create a first draft. the main concepts are artboards ( screens / landing visualizations ), and interactions. interactions define an event and a landing artboard. a software development platform is a web tool that allows one to store and browse source code through a repository and organize the backlog and the testing process. there are now many platforms online that provide these kinds of functionalities for free or for subscriptions. popular examples include github ( bought by microsoft and is free for open source ), gitlab and gitorious ( free clones of github to use and install on - premises ), devops by microsoft, and jira by atlassian. a continuous integration server is a server that runs pipelines pulls from a repository, compiles the code, runs tests automatically, and notifies you if there is a problem. few recognized and professional tools exist. examples are jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft ). in the capstone project course, we will use the processes and tools that we presented. much of the training for tools should be done online by following tutorials. all these are the basics that everyone needs to understand to do a decent job. ta session will help and answer questions whenever possible. what steps can be taken if tools fail during the capstone development process?",
        "predicted_answer": "",
        "true_answer": "it can be changed."
    },
    {
        "question": "there are several tools for the processes in software development. these tools are meant to support the development not to control it. during the development process in capstone, if tools do not work and this is expressed in a retrospective, it can be changed. the four main categories of tools that development teams need are design tools, source code versioning systems, software development platforms, and continuous integration servers. design tools help to present what a solution should look like and simulate its main interaction ( it is needed to show a project to stakeholders to make it concrete ). many people use powerpoint to show what they want to have. it is even possible to make clickable demos that way. many tools exist, an example is invision. this tool can be used to easily create a first draft. the main concepts are artboards ( screens / landing visualizations ), and interactions. interactions define an event and a landing artboard. a software development platform is a web tool that allows one to store and browse source code through a repository and organize the backlog and the testing process. there are now many platforms online that provide these kinds of functionalities for free or for subscriptions. popular examples include github ( bought by microsoft and is free for open source ), gitlab and gitorious ( free clones of github to use and install on - premises ), devops by microsoft, and jira by atlassian. a continuous integration server is a server that runs pipelines pulls from a repository, compiles the code, runs tests automatically, and notifies you if there is a problem. few recognized and professional tools exist. examples are jenkins ( open source and free ), gitlabci ( open source and free ), and azure pipelines ( by microsoft ). in the capstone project course, we will use the processes and tools that we presented. much of the training for tools should be done online by following tutorials. all these are the basics that everyone needs to understand to do a decent job. ta session will help and answer questions whenever possible. what can be done to resolve tool failures in the capstone development process?",
        "predicted_answer": "",
        "true_answer": "it can be changed."
    },
    {
        "question": "the first assignment for the capstone project consists of two parts. part 1 is individual, where each student must come up with an idea for a web application that is innovative, useful, and simple to explain. part 2 involves presenting the ideas to the group, discussing advantages and disadvantages, and collectively choosing one idea to develop further. the group will then create a clickable demo using a design tool and prepare slides for a 5 - minute presentation. the assignment deliverables include a presentation in pdf or ppt format with a recorded demo and a report. for the first assignment, the organization of the assignment is as follows ; individual work at the beginning, announcement of groups at the teaching assistant ( ta ) session, presentation given by groups in the session stated in the course lecture, and the delivery of a report. the presentation deliverable should contain an explanation about the idea that was chosen that answers the question what? why? how? ( 1 slide ), how the group work was organized ( include. meeting times, tools you used, roles and decision processes, 1 slide ), and finally lessons learned ( 1 slide ). the report deliverable should include a short explanation of the ideas of each group member with their name on one page each possibly with pictures or screenshots, and a detailed explanation of the chosen idea that answers the three questions what? why? how?, a description of the demo with screenshots, a description of the roles in the team, a description of the difficulties and the solutions you found, and lessons learned ( what could be improved or changed in the future ). how is the first assignment organized within the capstone project course?",
        "predicted_answer": "individual work at the beginning, announcement of groups at the teaching assistant ( ta ) session, presentation given by groups in the session stated in the course lecture, and the delivery of a report.",
        "true_answer": "an explanation about the idea that was chosen that answers the question what? why? how? ( 1 slide ), how the group work was organized ( include. meeting times, tools you used, roles and decision processes, 1 slide ), and finally lessons learned ( 1 slide )."
    },
    {
        "question": "the first assignment for the capstone project consists of two parts. part 1 is individual, where each student must come up with an idea for a web application that is innovative, useful, and simple to explain. part 2 involves presenting the ideas to the group, discussing advantages and disadvantages, and collectively choosing one idea to develop further. the group will then create a clickable demo using a design tool and prepare slides for a 5 - minute presentation. the assignment deliverables include a presentation in pdf or ppt format with a recorded demo and a report. for the first assignment, the organization of the assignment is as follows ; individual work at the beginning, announcement of groups at the teaching assistant ( ta ) session, presentation given by groups in the session stated in the course lecture, and the delivery of a report. the presentation deliverable should contain an explanation about the idea that was chosen that answers the question what? why? how? ( 1 slide ), how the group work was organized ( include. meeting times, tools you used, roles and decision processes, 1 slide ), and finally lessons learned ( 1 slide ). the report deliverable should include a short explanation of the ideas of each group member with their name on one page each possibly with pictures or screenshots, and a detailed explanation of the chosen idea that answers the three questions what? why? how?, a description of the demo with screenshots, a description of the roles in the team, a description of the difficulties and the solutions you found, and lessons learned ( what could be improved or changed in the future ). how is the first assignment laid out in the capstone project course?",
        "predicted_answer": "",
        "true_answer": "individual work at the beginning, announcement of groups at the teaching assistant ( ta ) session, presentation given by groups in the session stated in the course lecture, and the delivery of a report."
    }
]